const fs = require("fs");
const path = require("path");
const axios = require("axios");

module.exports.config = {
    name: "azan",
    version: "1.3.0",
    hasPermssion: 0,
    credits: "SaGor",
    description: "‡¶´‡¶ú‡¶∞ ‡¶ì ‡¶á‡¶∂‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶§‡¶∞‡ßç‡¶ï + API ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶Ü‡¶ú‡¶æ‡¶®",
    commandCategory: "system",
    usages: "auto azan",
    cooldowns: 5,
};

// ‡¶Ü‡¶Ø‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ (cache ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá)
const azanAudioNormal = path.join(__dirname, "cache", "azan.mp3");
const azanAudioFajr = path.join(__dirname, "cache", "fajr.mp3");
const azanAudioIsha = path.join(__dirname, "cache", "isha.mp3");

// ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∂‡¶π‡¶∞/‡¶¶‡ßá‡¶∂ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
const location = {
    city: "Dhaka",
    country: "Bangladesh"
};

// Anti-spam cache
let azanPlayedToday = {};
let alertSentToday = {};

// Timer
module.exports.run = async function ({ api, event }) {
    api.sendMessage("‚è≥ ‡¶Ü‡¶ú‡¶æ‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶´‡¶ú‡¶∞/‡¶á‡¶∂‡¶æ ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶§‡¶∞‡ßç‡¶ï) ...", event.threadID);

    setInterval(async () => {
        try {
            const today = new Date().toISOString().split("T")[0]; // 2025-09-16

            const response = await axios.get(
                `https://api.aladhan.com/v1/timingsByCity?city=${location.city}&country=${location.country}&method=2`
            );

            const timings = response.data.data.timings;
            const now = new Date();
            const hours = now.getHours();
            const minutes = now.getMinutes();
            const currentTime = `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}`;

            for (const [prayer, time] of Object.entries(timings)) {
                const [prayerHour, prayerMinute] = time.slice(0, 5).split(":").map(Number);
                const key = `${today}-${prayer}`;

                // --- ‡¶´‡¶ú‡¶∞/‡¶á‡¶∂‡¶æ ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ---
                if ((prayer.toLowerCase() === "fajr" || prayer.toLowerCase() === "isha") 
                    && !alertSentToday[key]) {
                    const alertHour = prayerHour;
                    const alertMinute = prayerMinute - 5;
                    let alertTime = new Date();
                    alertTime.setHours(alertHour, alertMinute);

                    if (alertTime.getHours() === hours && alertTime.getMinutes() === minutes) {
                        alertSentToday[key] = true;
                        const alertMsg = prayer.toLowerCase() === "fajr" 
                            ? "üåÖ ‡¶´‡¶ú‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶ú‡¶æ‡¶® ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá!" 
                            : "üåô ‡¶á‡¶∂‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶æ‡¶® ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá!";
                        api.sendMessage(alertMsg, event.threadID);
                    }
                }

                // --- ‡¶Ü‡¶∏‡¶≤ ‡¶Ü‡¶Ø‡¶æ‡¶® ‡¶¨‡¶æ‡¶ú‡¶æ‡¶®‡ßã ---
                if (currentTime === time.slice(0, 5) && !azanPlayedToday[key]) {
                    azanPlayedToday[key] = true;

                    let audioFile = azanAudioNormal;
                    let messageBody = `üì¢ ‡¶è‡¶ñ‡¶® ${prayer.toUpperCase()} ‡¶è‡¶∞ ‡¶Ü‡¶Ø‡¶æ‡¶®`;

                    if (prayer.toLowerCase() === "fajr") {
                        audioFile = azanAudioFajr;
                        messageBody = "üåÖ ‡¶´‡¶ú‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶Ø‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá";
                    } else if (prayer.toLowerCase() === "isha") {
                        audioFile = azanAudioIsha;
                        messageBody = "üåô ‡¶á‡¶∂‡¶æ‡¶∞ ‡¶Ü‡¶Ø‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá";
                    }

                    api.sendMessage(
                        {
                            body: messageBody,
                            attachment: fs.createReadStream(audioFile),
                        },
                        event.threadID
                    );
                }
            }
        } catch (err) {
            console.error("API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", err.message);
        }
    }, 60000); // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶ö‡ßá‡¶ï
};
